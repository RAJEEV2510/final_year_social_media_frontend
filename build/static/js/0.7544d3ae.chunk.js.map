{"version":3,"sources":["../node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","UNDEFINED","EVENTS","INPUT_VALIDATION_RULES","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","type","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","isEmptyObject","keys","castPath","parent","updatePath","baseGet","array","start","end","baseSlice","unset","paths","forEach","childObject","previousObjRef","k","slice","objectRef","currentPaths","currentPathsLength","item","baseUnset","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","disconnect","defaultReturn","isValid","getRadioValue","checked","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","files","selected","isString","getFieldsValues","search","output","isSearchString","isSearchArray","isNest","nest","startsWith","find","isSameError","error","types","message","objectA","objectB","compareObject","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isFunction","isBoolean","getValidateError","isStringValue","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","a","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validateFunctions","Promise","resolve","validateResult","validationResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","context","abortEarly","getDefaultValue","defaultValues","flatArray","list","b","concat","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","watchFieldArray","add","skipValidation","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","prev","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","modeChecker","mode","isOnChange","useRef","React","useState","useCallback","useEffect","useForm","reValidateMode","validationContext","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","watchFieldArrayRef","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","validationContextRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateCallback","isWeb","isProxyEnabled","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","substring","indexOf","isDirtyChanged","setDirtyAndTouchedFields","setInternalValueBatch","parentFieldName","isValueArray","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","isFieldWatched","preFixName","setValue","valueOrShouldValidate","shouldValidate","isMultiple","isStringFieldName","target","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","then","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","e","preventDefault","persist","resolvedPrevious","fieldError","resetRefs","reset","closest","_a","resetFieldArray","getValues","outputValues","formState","control","Proxy","prop","createContext"],"mappings":"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","file":"static/js/0.7544d3ae.chunk.js","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nvar stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (isHTMLElement(field.ref) && field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => !!element && element.type === 'radio';\n\nvar isCheckBoxInput = (element) => !!element && element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const childObject = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    const result = !(childObject != null) || delete childObject[key];\r\n    let previousObjRef = undefined;\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index) {\r\n                if (isObject(objectRef) && isEmptyObject(objectRef)) {\r\n                    previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n                }\r\n                else if (isArray(objectRef) &&\r\n                    !objectRef.filter(data => isObject(data) && !isEmptyObject(data))\r\n                        .length) {\r\n                    delete previousObjRef[item];\r\n                }\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach(path => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    unset(options, [`[${index}]`]);\r\n                }\r\n            });\r\n            if (options && !options.filter(Boolean).length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => !!element && element.type === 'file';\n\nvar isMultipleSelect = (element) => !!element && element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    const isSearchString = isString(search);\r\n    const isSearchArray = isArray(search);\r\n    const isNest = search && search.nest;\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            isNest ||\r\n            (isSearchString && name.startsWith(search)) ||\r\n            (isSearchArray &&\r\n                search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, { type, types, message, }) => {\r\n    return (isObject(error) &&\r\n        error.type === type &&\r\n        error.message === message &&\r\n        compareObject(error.types, types));\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isString(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues, watchFieldArray) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = watchFieldArray ? watchFieldArray : undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (isArray(watchFieldArray) &&\r\n            isArray(value) &&\r\n            value.length !== watchFieldArray.length) {\r\n            value = watchFieldArray;\r\n        }\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const watchFieldArrayRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const validationContextRef = useRef(validationContext);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateCallback = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateCallback) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateCallback]);\r\n    const setFieldValue = useCallback((field, rawValue) => {\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isEmptyString(value) ||\r\n                isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return !!type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setDirtyAndTouchedFields = useCallback((fieldName) => {\r\n        if (setDirty(fieldName) ||\r\n            (!get(touchedFieldsRef.current, fieldName) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, fieldName, true);\r\n        }\r\n    }, []);\r\n    const setInternalValueBatch = useCallback((name, value, parentFieldName) => {\r\n        const isValueArray = isArray(value);\r\n        for (const key in value) {\r\n            const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;\r\n            if (isObject(value[key])) {\r\n                setInternalValueBatch(name, value[key], fieldName);\r\n            }\r\n            const field = fieldsRef.current[fieldName];\r\n            if (field) {\r\n                setFieldValue(field, value[key]);\r\n                setDirtyAndTouchedFields(fieldName);\r\n            }\r\n        }\r\n    }, [setFieldValue, setDirtyAndTouchedFields]);\r\n    const setInternalValue = useCallback((name, value) => {\r\n        const field = fieldsRef.current[name];\r\n        if (field) {\r\n            setFieldValue(field, value);\r\n            const output = setDirtyAndTouchedFields(name);\r\n            if (isBoolean(output)) {\r\n                return output;\r\n            }\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValueBatch(name, value);\r\n        }\r\n    }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateCallback) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateCallback,\r\n    ]);\r\n    const isFieldWatched = (name) => {\r\n        const preFixName = (name.match(/\\w+/) || [])[0];\r\n        return (isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name) ||\r\n            (watchFieldsRef.current.has(preFixName) &&\r\n                !isKey(name) &&\r\n                fieldArrayNamesRef.current.has(preFixName)));\r\n    };\r\n    function setValue(names, valueOrShouldValidate, shouldValidate) {\r\n        let shouldRender = false;\r\n        const isMultiple = isArray(names);\r\n        (isMultiple\r\n            ? names\r\n            : [names]).forEach((name) => {\r\n            const isStringFieldName = isString(name);\r\n            shouldRender =\r\n                setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName\r\n                    ? valueOrShouldValidate\r\n                    : Object.values(name)[0]) || isMultiple\r\n                    ? true\r\n                    : isFieldWatched(name);\r\n        });\r\n        if (shouldRender || isMultiple) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate || (isMultiple && valueOrShouldValidate)) {\r\n            triggerValidation(isMultiple ? undefined : names);\r\n        }\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (shouldValidateCallback) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationResolver]);\r\n    const removeFieldEventListener = (field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    };\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateCallback) {\r\n                validateSchemaIsValid();\r\n            }\r\n        }\r\n    }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues, fieldArrayNamesRef.current.has(fieldNames)\r\n                ? watchFieldArrayRef.current[fieldNames]\r\n                : undefined);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValuesRef.current;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(currentField, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateCallback &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateCallback) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                    if (fieldError[name]) {\r\n                        set(resolvedPrevious.errors, name, fieldError[name]);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError && isWeb) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateCallback,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        touchedFieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = (values) => {\r\n        if (isWeb) {\r\n            for (const value of Object.values(fieldsRef.current)) {\r\n                if (value && isHTMLElement(value.ref) && value.ref.closest) {\r\n                    try {\r\n                        value.ref.closest('form').reset();\r\n                        break;\r\n                    }\r\n                    catch (_a) { }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs();\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateCallback) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const control = Object.assign(Object.assign({ register,\r\n        unregister,\r\n        removeFieldEventListener,\r\n        getValues,\r\n        setValue,\r\n        reRender,\r\n        triggerValidation }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), { formState, mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        watchFieldArrayRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef });\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue: useCallback(setValue, [\r\n            reRender,\r\n            setInternalValue,\r\n            triggerValidation,\r\n        ]),\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, []),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n            watchFieldArrayRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    const context = useContext(FormGlobalContext);\r\n    if (!isUndefined(context))\r\n        return context;\r\n    throw new Error('Missing FormContext');\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign(Object.assign({}, (isObject(value) ? value : { value })), { [keyName]: generateId() }));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nconst removeAt = (data, index) => [\r\n    ...data.slice(0, index),\r\n    ...data.slice(index + 1),\r\n];\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : isArray(index)\r\n        ? index.reduce(({ result, previousIndex }, i) => ({\r\n            result: previousIndex > -1\r\n                ? removeAt(result, previousIndex < i ? i - 1 : i)\r\n                : removeAt(result, i),\r\n            previousIndex: i,\r\n        }), {\r\n            result: data,\r\n            previousIndex: -1,\r\n        }).result\r\n        : removeAt(data, index);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) &&\r\n    ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nvar prependAt = (data, value) => [\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data,\r\n];\n\nvar insertAt = (data, index, value) => [\r\n    ...data.slice(0, index),\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data.slice(index),\r\n];\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst { useEffect: useEffect$1, useCallback: useCallback$1, useRef: useRef$1, useState: useState$1 } = React;\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, reRender, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldArrayRef, validFieldsRef, fieldsWithValidationRef, validateSchemaIsValid, } = control || methods.control;\r\n    const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current, keyName));\r\n    const allFields = useRef$1(fields);\r\n    const appendValueWithKey = (value) => value.map((v) => appendId(v, keyName));\r\n    allFields.current = fields;\r\n    const commonTasks = (fieldsValues) => {\r\n        watchFieldArrayRef.current = Object.assign(Object.assign({}, watchFieldArrayRef.current), { [name]: fieldsValues });\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = getValues({ nest: true })[name];\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n        }\r\n        commonTasks([\r\n            ...allFields.current,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n    };\r\n    const prepend = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields();\r\n        commonTasks(prependAt(allFields.current, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n        }\r\n    };\r\n    const remove = (index) => {\r\n        if (!isUndefined(index)) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(removeArrayAt(allFields.current, index));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n            if (!errorsRef.current[name].filter(Boolean).length) {\r\n                delete errorsRef.current[name];\r\n            }\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            let fieldIndex = -1;\r\n            let isFound = false;\r\n            const isIndexUndefined = isUndefined(index);\r\n            while (fieldIndex++ < fields.length) {\r\n                const isLast = fieldIndex === fields.length - 1;\r\n                const isCurrentIndex = (isArray(index) ? index : [index]).indexOf(fieldIndex) >= 0;\r\n                if (isCurrentIndex || isIndexUndefined) {\r\n                    isFound = true;\r\n                }\r\n                if (!isFound) {\r\n                    continue;\r\n                }\r\n                for (const key in fields[fieldIndex]) {\r\n                    const currentFieldName = `${name}[${fieldIndex}].${key}`;\r\n                    if (isCurrentIndex || isLast || isIndexUndefined) {\r\n                        validFieldsRef.current.delete(currentFieldName);\r\n                        fieldsWithValidationRef.current.delete(currentFieldName);\r\n                    }\r\n                    else {\r\n                        const previousFieldName = `${name}[${fieldIndex - 1}].${key}`;\r\n                        if (validFieldsRef.current.has(currentFieldName)) {\r\n                            validFieldsRef.current.add(previousFieldName);\r\n                        }\r\n                        if (fieldsWithValidationRef.current.has(currentFieldName)) {\r\n                            fieldsWithValidationRef.current.add(previousFieldName);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            reRender();\r\n        }\r\n    };\r\n    const insert = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(insertAt(allFields.current, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(allFields.current, indexA, indexB);\r\n        commonTasks([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(allFields.current, from, to);\r\n        commonTasks([...allFields.current]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        watchFieldArrayRef.current = Object.assign(Object.assign({}, watchFieldArrayRef.current), { [name]: fields });\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap: useCallback$1(swap, []),\r\n        move: useCallback$1(move, []),\r\n        prepend: useCallback$1(prepend, []),\r\n        append: useCallback$1(append, []),\r\n        remove: useCallback$1(remove, []),\r\n        insert: useCallback$1(insert, []),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isCheckboxInput || isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$2(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$2(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (event) => {\r\n        const data = getInputValue(event, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (event) => {\r\n        const data = commonTask(event);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), Object.assign({}, rules));\r\n    };\r\n    useEffect$2(() => {\r\n        if (!fieldsRef.current[name]) {\r\n            registerField();\r\n            setInputStateValue(isUndefined(defaultValue)\r\n                ? get(defaultValuesRef.current, name)\r\n                : defaultValue);\r\n        }\r\n    });\r\n    useEffect$2(() => {\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name]);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent)\r\n        ? cloneElement(InnerComponent, props)\r\n        : createElement(InnerComponent, props);\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"],"sourceRoot":""}